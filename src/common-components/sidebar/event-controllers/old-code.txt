import { nanoid } from "nanoid";
import axios from "axios";
import notepad from "./assets/hashtag.png";
import { toast } from "react-toastify";

// Handler for adding a new todo item
const handle_AddTodo = async (
  todos,
  setTodos,
  spaceIdSelected,
  subSpaceIdSelected,
  subSpaceClicked,
  refreshTypeSelected
) => {
  const obj = {
    id: nanoid(),
    type: "todo",
    checked: [],
    unchecked: [],
  };

  setTodos([...todos, obj]);

  let version;
  let date = new Date();
  version = getDayOfYear(date);

  console.log("Version is : ", version);

  const data = {
    space_id: spaceIdSelected,
    subspace_id: subSpaceClicked,
    user_id: localStorage.getItem("userId"),
    name: obj.header,
    refresh_type: "daily",
    last_state: true,
    version: version,
  };

  // Api call
  try {
    const response = await axios.post("https://meseer.com/dog/todos", data);
    console.log(response);

    // const secondres = await axios.post(`https://meseer.com/dog/todo_content`, {
    //   todo_id: `response.data.todoid`,
    //   content: "This is a new todo content",
    //   checked: true,
    //   urgent: true,
    //   important: false,
    // });
  } catch (err) {
    console.error("Error posting data:", err);
    toast(err);
  }
};

const getComputedRefreshType = (refreshTypeSelected) => {
  let version = null;
  const now = new Date();

  if (refreshTypeSelected === "daily") {
    // Current day of the year
    const startOfYear = new Date(now.getFullYear(), 0, 0);
    const diff = now - startOfYear;
    const oneDay = 1000 * 60 * 60 * 24;
    version = Math.floor(diff / oneDay);
  } else if (refreshTypeSelected === "weekly") {
    // Current week of the year
    const startOfYear = new Date(now.getFullYear(), 0, 1);
    const days = Math.floor((now - startOfYear) / (24 * 60 * 60 * 1000));
    version = Math.ceil((days + startOfYear.getDay() + 1) / 7);
  } else if (refreshTypeSelected === "monthly") {
    // Current month of the year (1-based)
    version = now.getMonth() + 1;
  } else {
    throw new Error("Invalid refresh type selected");
  }

  return version;
};

const handle_AddNotepad = async (
  todos,
  setTodos,
  spaceIdSelected,
  subSpaceClicked,
  refreshTypeSelected
) => {
  // Computing the refresh type :
  let newRefreshType = refreshTypeSelected.toLowerCase();
  let created_date = new Date().toISOString(); // Correct format
  let last_updated = new Date().toISOString(); // Correct format

  const obj = {
    id: nanoid(),
    type: "notepad",
    hastags: ["Fitness", "Jam", "Breakfast", "Dinner", "Lunch"],
    highlightColors: [
      "#FFEB3B",
      "#FFC107",
      "#FF5722",
      "#F44336",
      "#E91E63",
      "#9C27B0",
      "#673AB7",
      "#3F51B5",
      "#2196F3",
      "#03A9F4",
      "#00BCD4",
      "#009688",
      "#4CAF50",
      "#8BC34A",
      "#CDDC39",
      "#FFC107",
      "#FF9800",
      "#795548",
      "#9E9E9E",
      "#607D8B",
    ],
    header: "dummy header",
    wordpadContentId: null,
    refresh_type: newRefreshType,
    created_date,
    last_updated,
    sections: [
      {
        id: nanoid(),
        content: "",
        type: "header",
      },
    ],
  };

  let computedRefreshType = await getComputedRefreshType(newRefreshType);

  let data = {
    space_id: spaceIdSelected,
    subspace_id: subSpaceClicked,
    user_id: localStorage.getItem("userId"),
    refresh_type: newRefreshType,
    name: obj.header,
    last_state: true,
    created_date,
    last_updated,
  };

  console.log("Data : ", data);

  try {
    const response = await axios.post(`https://meseer.com/dog/wordpads`, data);

    console.log("Posting Wordpad: ", response);
    // add a micro content so that it starts showing up
    const newData = "<h>";

    const sampleContent = await axios.post(
      `https://meseer.com/dog/wordpad-content`,
      {
        wordpad_id: response.data.wordpad_id,
        content: newData,
        version: computedRefreshType,
        created_date: new Date().toISOString(), // Correct format
        last_updated: new Date().toISOString(), // Correct format
      }
    );

    console.log("Wordpad Content : ", sampleContent);

    let wordpadContentId = sampleContent.data.wc_id;
    obj.wordpadContentId = wordpadContentId;

    setTodos([...todos, obj]);
  } catch (error) {
    console.error("Error posting data:", error);
    toast(error);
  }
};

const createMeal = (foodTableData, setFoodTableData) => {
  let obj = {
    id: nanoid(),
    mealName: "Dummy Bulk",
    bulkFoodItems: ["Dummy"],
    foodItems: [
      {
        id: nanoid(),
        foodItem: "Eggs",
        quantity: 100,
        unit: "gms",
      },
      {
        id: nanoid(),
        foodItem: "Oats",
        quantity: 150,
        unit: "kgs",
      },
    ],

    assignMeal: {
      selectDay: "Week days",
      mealType: "Breakfast",
      mealDuration: "100",
      timeUnity: "mins",
      with: "Alone",
      activity: "None",
    },
  };

  let newFoodData = [...foodTableData, obj];
  setFoodTableData(newFoodData);
};

const addFootItem = (foodTableData, setFoodTableData, mealResizeData) => {
  // foottable data is the overal data
  // meal resize data is one single data which is open right now

  // find the id associated with the mealresize data in the foottabledata
  const index = foodTableData.findIndex(
    (footData) => footData.id === mealResizeData.id
  );

  const newFootTableData = [...foodTableData];
  let newFoodItem = {
    id: nanoid(),
    foodItem: "Dummy",
    quantity: 111,
    unit: "kgms",
  };
  newFootTableData[index].foodItems.push(newFoodItem);
  setFoodTableData(newFootTableData);
  // console.log(newFootTableData)
};

const handleSubSpaceAdd = (
  activeSubMenu,
  spaceSubMenu,
  activitySubMenu,
  setSpaceSubMenu,
  setActivitySubMenu,
  setActiveSubMenu
) => {
  if (activeSubMenu.name === "space") {
    // add to the space sub menu
    let newSpaceMenu = { ...spaceSubMenu };
    let newobj = {
      id: nanoid(),
      title: "Dummy",
      img: notepad,
      alt: "notes-img",
      route: "/spaces/notes",
    };

    newSpaceMenu.data.unshift(newobj);
    setSpaceSubMenu(newSpaceMenu);
    setActiveSubMenu(newSpaceMenu);
  } else if (activeSubMenu.name === "activity") {
    // add to the activity submenu
  }
};

const handleEditModal = (editOpen, setEditOpen) => {
  setEditOpen(!editOpen);
};

// Create an object to export
export default {
  handle_AddTodo,
  handle_AddNotepad,
  createMeal,
  addFootItem,
  handleSubSpaceAdd,
  handleEditModal,
};
